@page "/manage-items"
@using BlazorWebAssemblyForInvokingAzureFunctionCosmosDBCRUD.Models
@using BlazorWebAssemblyForInvokingAzureFunctionCosmosDBCRUD.Services
@inject CosmosDbService CosmosService

<div class="container mt-5">
    <h3 class="text-primary mb-4">To-Do List and Item Management</h3>

    <!-- Section to create a new item -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h4 class="card-title text-secondary">Create a new To-Do item</h4>

            <EditForm Model="newItem" OnValidSubmit="CreateNewItem">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label class="form-label">Name:</label>
                    <InputText @bind-Value="newItem.name" class="form-control" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description:</label>
                    <InputText @bind-Value="newItem.description" class="form-control" />
                </div>
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="newItem.IsCompleted" class="form-check-input" />
                    <label class="form-check-label">Completed</label>
                </div>

                <button type="submit" class="btn btn-success">Create Item</button>
            </EditForm>

            @if (createMessage != null)
            {
                <p class="mt-3 alert alert-info">@createMessage</p>
            }
        </div>
    </div>

    <!-- Section to list existing items -->
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <h4 class="card-title text-secondary">Existing To-Do Items</h4>

            @if (items == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (!items.Any())
            {
                <p class="text-warning">No items found.</p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var item in items)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@item.name</strong> - @item.description -
                                <span class="badge bg-primary">@((item.IsCompleted) ? "Completed" : "Pending")</span>
                            </div>
                            <div>
                                <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteItem(item.id)">Delete</button>
                                <button class="btn btn-warning btn-sm" @onclick="() => EditItem(item.id)">Update</button>
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>

    <!-- Section to update existing item -->
    @if (isEditMode)
    {
        <div class="card mb-4 shadow-sm">
            <div class="card-body">
                <h4 class="card-title text-secondary">Update To-Do Item</h4>

                @if (currentItem != null)
                {
                    <EditForm Model="currentItem" OnValidSubmit="UpdateItem">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Name:</label>
                            <InputText @bind-Value="currentItem.name" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description:</label>
                            <InputText @bind-Value="currentItem.description" class="form-control" />
                        </div>
                        <div class="form-check mb-3">
                            <InputCheckbox @bind-Value="currentItem.IsCompleted" class="form-check-input" />
                            <label class="form-check-label">Completed</label>
                        </div>

                        <button type="submit" class="btn btn-primary">Update Item</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </EditForm>

                    @if (updateMessage != null)
                    {
                        <p class="mt-3 alert alert-info">@updateMessage</p>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    private List<TodoItem> items;
    private TodoItem newItem = new TodoItem();
    private TodoItem currentItem = null; // Holds the item being updated
    private string createMessage;
    private string updateMessage;
    private bool isEditMode = false; // Flag to show or hide the update form

    protected override async Task OnInitializedAsync()
    {
        // Load existing items when the page initializes
        items = await CosmosService.GetItemsAsync();
    }

    // Create a new item
    private async Task CreateNewItem()
    {
        newItem.id = Guid.NewGuid().ToString(); // Generate a new unique ID for the item
        bool isCreated = await CosmosService.CreateItemAsync(newItem);
        if (isCreated)
        {
            createMessage = "Item created successfully!";
            newItem = new TodoItem(); // Reset the form after success
            items = await CosmosService.GetItemsAsync(); // Refresh the list after creating a new item
        }
        else
        {
            createMessage = "Failed to create item.";
        }
    }

    // Delete an item by ID
    private async Task DeleteItem(string id)
    {
        bool isDeleted = await CosmosService.DeleteItemAsync(id);
        if (isDeleted)
        {
            items = await CosmosService.GetItemsAsync(); // Refresh the list after deletion
        }
    }

    // Enter edit mode for an item by ID
    private async Task EditItem(string id)
    {
        currentItem = await CosmosService.GetItemByIdAsync(id);
        if (currentItem != null)
        {
            isEditMode = true; // Show the update form
            updateMessage = null; // Clear any previous update messages
        }
    }

    // Update the selected item
    private async Task UpdateItem()
    {
        bool isUpdated = await CosmosService.UpdateItemAsync(currentItem.id, currentItem);
        if (isUpdated)
        {
            updateMessage = "Item updated successfully!";
            items = await CosmosService.GetItemsAsync(); // Refresh the list after the update
            isEditMode = false; // Exit edit mode
        }
        else
        {
            updateMessage = "Failed to update item.";
        }
    }

    // Cancel editing
    private void CancelEdit()
    {
        currentItem = null; // Clear the current item
        isEditMode = false; // Hide the update form
    }
}
